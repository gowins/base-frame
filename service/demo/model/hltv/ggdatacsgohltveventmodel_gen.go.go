// Code generated by goctl. DO NOT EDIT!

package hltv

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ggdataCsgoHltvEventFieldNames          = builder.RawFieldNames(&GgdataCsgoHltvEvent{})
	ggdataCsgoHltvEventRows                = strings.Join(ggdataCsgoHltvEventFieldNames, ",")
	ggdataCsgoHltvEventRowsExpectAutoSet   = strings.Join(stringx.Remove(ggdataCsgoHltvEventFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	ggdataCsgoHltvEventRowsWithPlaceHolder = strings.Join(stringx.Remove(ggdataCsgoHltvEventFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	ggdataCsgoHltvEventModel interface {
		Insert(ctx context.Context, data *GgdataCsgoHltvEvent) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*GgdataCsgoHltvEvent, error)
		FindOneByEventId(ctx context.Context, eventId uint64) (*GgdataCsgoHltvEvent, error)
		Update(ctx context.Context, data *GgdataCsgoHltvEvent) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultGgdataCsgoHltvEventModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GgdataCsgoHltvEvent struct {
		Id              uint64         `db:"id"`
		EventId         uint64         `db:"event_id"`         // hltv赛事ID
		GgdataEventId   sql.NullInt64  `db:"ggdata_event_id"`  // ggdata对应赛事ID
		Name            string         `db:"name"`             // 赛事名称
		NameEn          string         `db:"name_en"`          // 赛事名称英文
		Tag             string         `db:"tag"`              // 赛事简称
		TagEn           string         `db:"tag_en"`           // 赛事简称英文
		LogoUrl         string         `db:"logo_url"`         // 赛事logo
		BannerUrl       string         `db:"banner_url"`       // 赛事横幅
		BackgroundUrl   string         `db:"background_url"`   // 赛事背景图
		Description     sql.NullString `db:"description"`      // 赛事介绍
		StartTime       sql.NullTime   `db:"start_time"`       // 开始日期
		EndTime         sql.NullTime   `db:"end_time"`         // 结束日期
		EventType       string         `db:"event_type"`       // 赛事类型:major/international/regional/online/local/other
		Level           uint64         `db:"level"`            // 赛事等级:1-major/2-S级/3-A级/4-B级,5-C级
		TeamCount       int64          `db:"team_count"`       // 队伍数量
		LocationCountry string         `db:"location_country"` // 举办地国家
		LocationCity    string         `db:"location_city"`    // 举办地城市
		LocationInfo    string         `db:"location_info"`    // 举办地信息 如体育馆名
		PrizeTotal      uint64         `db:"prize_total"`      // 总奖金
		PrizeCurrency   string         `db:"prize_currency"`   // 奖金币种:美元usd/人民币cny/欧元eur/英镑gbp/港币hkd
		PrizeFormats    sql.NullString `db:"prize_formats"`    // 奖金分配规则 JSON
		Formats         sql.NullString `db:"formats"`          // 赛制信息
		Maps            sql.NullString `db:"maps"`             // 地图池 JSON
		Status          int64          `db:"status"`           // 赛事状态:-1-取消,0-未开始,1-进行中,2-已结束
		Url             string         `db:"url"`              // hltv页面地址
		RecordStatus    uint64         `db:"record_status"`    // 记录状态:0-待处理/1-已导入
		UpdatedAt       time.Time      `db:"updated_at"`       // 更新日期
		DeletedAt       sql.NullTime   `db:"deleted_at"`       // 删除日期(软)
		CreatedAt       time.Time      `db:"created_at"`       // 创建日期
	}
)

func newGgdataCsgoHltvEventModel(conn sqlx.SqlConn) *defaultGgdataCsgoHltvEventModel {
	return &defaultGgdataCsgoHltvEventModel{
		conn:  conn,
		table: "`ggdata_csgo_hltv_event`",
	}
}

func (m *defaultGgdataCsgoHltvEventModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGgdataCsgoHltvEventModel) FindOne(ctx context.Context, id uint64) (*GgdataCsgoHltvEvent, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ggdataCsgoHltvEventRows, m.table)
	var resp GgdataCsgoHltvEvent
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGgdataCsgoHltvEventModel) FindOneByEventId(ctx context.Context, eventId uint64) (*GgdataCsgoHltvEvent, error) {
	var resp GgdataCsgoHltvEvent
	query := fmt.Sprintf("select %s from %s where `event_id` = ? limit 1", ggdataCsgoHltvEventRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, eventId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGgdataCsgoHltvEventModel) Insert(ctx context.Context, data *GgdataCsgoHltvEvent) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, ggdataCsgoHltvEventRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.EventId, data.GgdataEventId, data.Name, data.NameEn, data.Tag, data.TagEn, data.LogoUrl, data.BannerUrl, data.BackgroundUrl, data.Description, data.StartTime, data.EndTime, data.EventType, data.Level, data.TeamCount, data.LocationCountry, data.LocationCity, data.LocationInfo, data.PrizeTotal, data.PrizeCurrency, data.PrizeFormats, data.Formats, data.Maps, data.Status, data.Url, data.RecordStatus, data.UpdatedAt, data.DeletedAt, data.CreatedAt)
	return ret, err
}

func (m *defaultGgdataCsgoHltvEventModel) Update(ctx context.Context, newData *GgdataCsgoHltvEvent) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ggdataCsgoHltvEventRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.EventId, newData.GgdataEventId, newData.Name, newData.NameEn, newData.Tag, newData.TagEn, newData.LogoUrl, newData.BannerUrl, newData.BackgroundUrl, newData.Description, newData.StartTime, newData.EndTime, newData.EventType, newData.Level, newData.TeamCount, newData.LocationCountry, newData.LocationCity, newData.LocationInfo, newData.PrizeTotal, newData.PrizeCurrency, newData.PrizeFormats, newData.Formats, newData.Maps, newData.Status, newData.Url, newData.RecordStatus, newData.UpdatedAt, newData.DeletedAt, newData.CreatedAt, newData.Id)
	return err
}

func (m *defaultGgdataCsgoHltvEventModel) tableName() string {
	return m.table
}

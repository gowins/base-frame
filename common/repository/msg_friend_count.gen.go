// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"base-frame/common/model"
)

func newMsgFriendCount(db *gorm.DB, opts ...gen.DOOption) msgFriendCount {
	_msgFriendCount := msgFriendCount{}

	_msgFriendCount.msgFriendCountDo.UseDB(db, opts...)
	_msgFriendCount.msgFriendCountDo.UseModel(&model.MsgFriendCount{})

	tableName := _msgFriendCount.msgFriendCountDo.TableName()
	_msgFriendCount.ALL = field.NewAsterisk(tableName)
	_msgFriendCount.ID = field.NewUint64(tableName, "id")
	_msgFriendCount.UID = field.NewUint32(tableName, "uid")
	_msgFriendCount.Sum = field.NewUint32(tableName, "sum")
	_msgFriendCount.Unread = field.NewUint32(tableName, "unread")
	_msgFriendCount.CreateTime = field.NewUint32(tableName, "create_time")
	_msgFriendCount.UpdateTime = field.NewUint32(tableName, "update_time")

	_msgFriendCount.fillFieldMap()

	return _msgFriendCount
}

type msgFriendCount struct {
	msgFriendCountDo msgFriendCountDo

	ALL        field.Asterisk
	ID         field.Uint64
	UID        field.Uint32 // 用户id
	Sum        field.Uint32 // 总数
	Unread     field.Uint32 // 未读数量
	CreateTime field.Uint32 // 创建时间
	UpdateTime field.Uint32 // 更新时间

	fieldMap map[string]field.Expr
}

func (m msgFriendCount) Table(newTableName string) *msgFriendCount {
	m.msgFriendCountDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m msgFriendCount) As(alias string) *msgFriendCount {
	m.msgFriendCountDo.DO = *(m.msgFriendCountDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *msgFriendCount) updateTableName(table string) *msgFriendCount {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint64(table, "id")
	m.UID = field.NewUint32(table, "uid")
	m.Sum = field.NewUint32(table, "sum")
	m.Unread = field.NewUint32(table, "unread")
	m.CreateTime = field.NewUint32(table, "create_time")
	m.UpdateTime = field.NewUint32(table, "update_time")

	m.fillFieldMap()

	return m
}

func (m *msgFriendCount) WithContext(ctx context.Context) *msgFriendCountDo {
	return m.msgFriendCountDo.WithContext(ctx)
}

func (m msgFriendCount) TableName() string { return m.msgFriendCountDo.TableName() }

func (m msgFriendCount) Alias() string { return m.msgFriendCountDo.Alias() }

func (m *msgFriendCount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *msgFriendCount) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["id"] = m.ID
	m.fieldMap["uid"] = m.UID
	m.fieldMap["sum"] = m.Sum
	m.fieldMap["unread"] = m.Unread
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["update_time"] = m.UpdateTime
}

func (m msgFriendCount) clone(db *gorm.DB) msgFriendCount {
	m.msgFriendCountDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m msgFriendCount) replaceDB(db *gorm.DB) msgFriendCount {
	m.msgFriendCountDo.ReplaceDB(db)
	return m
}

type msgFriendCountDo struct{ gen.DO }

func (m msgFriendCountDo) Debug() *msgFriendCountDo {
	return m.withDO(m.DO.Debug())
}

func (m msgFriendCountDo) WithContext(ctx context.Context) *msgFriendCountDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m msgFriendCountDo) ReadDB() *msgFriendCountDo {
	return m.Clauses(dbresolver.Read)
}

func (m msgFriendCountDo) WriteDB() *msgFriendCountDo {
	return m.Clauses(dbresolver.Write)
}

func (m msgFriendCountDo) Session(config *gorm.Session) *msgFriendCountDo {
	return m.withDO(m.DO.Session(config))
}

func (m msgFriendCountDo) Clauses(conds ...clause.Expression) *msgFriendCountDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m msgFriendCountDo) Returning(value interface{}, columns ...string) *msgFriendCountDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m msgFriendCountDo) Not(conds ...gen.Condition) *msgFriendCountDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m msgFriendCountDo) Or(conds ...gen.Condition) *msgFriendCountDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m msgFriendCountDo) Select(conds ...field.Expr) *msgFriendCountDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m msgFriendCountDo) Where(conds ...gen.Condition) *msgFriendCountDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m msgFriendCountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *msgFriendCountDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m msgFriendCountDo) Order(conds ...field.Expr) *msgFriendCountDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m msgFriendCountDo) Distinct(cols ...field.Expr) *msgFriendCountDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m msgFriendCountDo) Omit(cols ...field.Expr) *msgFriendCountDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m msgFriendCountDo) Join(table schema.Tabler, on ...field.Expr) *msgFriendCountDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m msgFriendCountDo) LeftJoin(table schema.Tabler, on ...field.Expr) *msgFriendCountDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m msgFriendCountDo) RightJoin(table schema.Tabler, on ...field.Expr) *msgFriendCountDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m msgFriendCountDo) Group(cols ...field.Expr) *msgFriendCountDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m msgFriendCountDo) Having(conds ...gen.Condition) *msgFriendCountDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m msgFriendCountDo) Limit(limit int) *msgFriendCountDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m msgFriendCountDo) Offset(offset int) *msgFriendCountDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m msgFriendCountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *msgFriendCountDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m msgFriendCountDo) Unscoped() *msgFriendCountDo {
	return m.withDO(m.DO.Unscoped())
}

func (m msgFriendCountDo) Create(values ...*model.MsgFriendCount) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m msgFriendCountDo) CreateInBatches(values []*model.MsgFriendCount, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m msgFriendCountDo) Save(values ...*model.MsgFriendCount) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m msgFriendCountDo) First() (*model.MsgFriendCount, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgFriendCount), nil
	}
}

func (m msgFriendCountDo) Take() (*model.MsgFriendCount, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgFriendCount), nil
	}
}

func (m msgFriendCountDo) Last() (*model.MsgFriendCount, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgFriendCount), nil
	}
}

func (m msgFriendCountDo) Find() ([]*model.MsgFriendCount, error) {
	result, err := m.DO.Find()
	return result.([]*model.MsgFriendCount), err
}

func (m msgFriendCountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgFriendCount, err error) {
	buf := make([]*model.MsgFriendCount, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m msgFriendCountDo) FindInBatches(result *[]*model.MsgFriendCount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m msgFriendCountDo) Attrs(attrs ...field.AssignExpr) *msgFriendCountDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m msgFriendCountDo) Assign(attrs ...field.AssignExpr) *msgFriendCountDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m msgFriendCountDo) Joins(fields ...field.RelationField) *msgFriendCountDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m msgFriendCountDo) Preload(fields ...field.RelationField) *msgFriendCountDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m msgFriendCountDo) FirstOrInit() (*model.MsgFriendCount, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgFriendCount), nil
	}
}

func (m msgFriendCountDo) FirstOrCreate() (*model.MsgFriendCount, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgFriendCount), nil
	}
}

func (m msgFriendCountDo) FindByPage(offset int, limit int) (result []*model.MsgFriendCount, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m msgFriendCountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m msgFriendCountDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m msgFriendCountDo) Delete(models ...*model.MsgFriendCount) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *msgFriendCountDo) withDO(do gen.Dao) *msgFriendCountDo {
	m.DO = *do.(*gen.DO)
	return m
}

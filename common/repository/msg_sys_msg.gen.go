// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"base-frame/common/model"
)

func newMsgSysMsg(db *gorm.DB, opts ...gen.DOOption) msgSysMsg {
	_msgSysMsg := msgSysMsg{}

	_msgSysMsg.msgSysMsgDo.UseDB(db, opts...)
	_msgSysMsg.msgSysMsgDo.UseModel(&model.MsgSysMsg{})

	tableName := _msgSysMsg.msgSysMsgDo.TableName()
	_msgSysMsg.ALL = field.NewAsterisk(tableName)
	_msgSysMsg.ID = field.NewUint64(tableName, "id")
	_msgSysMsg.Title = field.NewString(tableName, "title")
	_msgSysMsg.Content = field.NewString(tableName, "content")
	_msgSysMsg.UID = field.NewUint32(tableName, "uid")
	_msgSysMsg.Role = field.NewUint32(tableName, "role")
	_msgSysMsg.Extras = field.NewString(tableName, "extras")
	_msgSysMsg.Extra = field.NewString(tableName, "extra")
	_msgSysMsg.Avatar = field.NewString(tableName, "avatar")
	_msgSysMsg.JumpPage = field.NewString(tableName, "jump_page")
	_msgSysMsg.MessageMode = field.NewUint32(tableName, "message_mode")
	_msgSysMsg.Status = field.NewUint8(tableName, "status")
	_msgSysMsg.CreateTime = field.NewUint32(tableName, "create_time")
	_msgSysMsg.UpdateTime = field.NewUint32(tableName, "update_time")
	_msgSysMsg.OriginID = field.NewString(tableName, "origin_id")

	_msgSysMsg.fillFieldMap()

	return _msgSysMsg
}

type msgSysMsg struct {
	msgSysMsgDo msgSysMsgDo

	ALL         field.Asterisk
	ID          field.Uint64
	Title       field.String // 标题
	Content     field.String // 内容
	UID         field.Uint32 // 用户id
	Role        field.Uint32 // 来源
	Extras      field.String // 扩展数据
	Extra       field.String // 预留
	Avatar      field.String // 预留
	JumpPage    field.String // 预留
	MessageMode field.Uint32 // 预留
	Status      field.Uint8  // 0未读 1已读
	CreateTime  field.Uint32 // 创建时间
	UpdateTime  field.Uint32 // 更新时间
	OriginID    field.String // 原始id

	fieldMap map[string]field.Expr
}

func (m msgSysMsg) Table(newTableName string) *msgSysMsg {
	m.msgSysMsgDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m msgSysMsg) As(alias string) *msgSysMsg {
	m.msgSysMsgDo.DO = *(m.msgSysMsgDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *msgSysMsg) updateTableName(table string) *msgSysMsg {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint64(table, "id")
	m.Title = field.NewString(table, "title")
	m.Content = field.NewString(table, "content")
	m.UID = field.NewUint32(table, "uid")
	m.Role = field.NewUint32(table, "role")
	m.Extras = field.NewString(table, "extras")
	m.Extra = field.NewString(table, "extra")
	m.Avatar = field.NewString(table, "avatar")
	m.JumpPage = field.NewString(table, "jump_page")
	m.MessageMode = field.NewUint32(table, "message_mode")
	m.Status = field.NewUint8(table, "status")
	m.CreateTime = field.NewUint32(table, "create_time")
	m.UpdateTime = field.NewUint32(table, "update_time")
	m.OriginID = field.NewString(table, "origin_id")

	m.fillFieldMap()

	return m
}

func (m *msgSysMsg) WithContext(ctx context.Context) *msgSysMsgDo {
	return m.msgSysMsgDo.WithContext(ctx)
}

func (m msgSysMsg) TableName() string { return m.msgSysMsgDo.TableName() }

func (m msgSysMsg) Alias() string { return m.msgSysMsgDo.Alias() }

func (m *msgSysMsg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *msgSysMsg) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 14)
	m.fieldMap["id"] = m.ID
	m.fieldMap["title"] = m.Title
	m.fieldMap["content"] = m.Content
	m.fieldMap["uid"] = m.UID
	m.fieldMap["role"] = m.Role
	m.fieldMap["extras"] = m.Extras
	m.fieldMap["extra"] = m.Extra
	m.fieldMap["avatar"] = m.Avatar
	m.fieldMap["jump_page"] = m.JumpPage
	m.fieldMap["message_mode"] = m.MessageMode
	m.fieldMap["status"] = m.Status
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["update_time"] = m.UpdateTime
	m.fieldMap["origin_id"] = m.OriginID
}

func (m msgSysMsg) clone(db *gorm.DB) msgSysMsg {
	m.msgSysMsgDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m msgSysMsg) replaceDB(db *gorm.DB) msgSysMsg {
	m.msgSysMsgDo.ReplaceDB(db)
	return m
}

type msgSysMsgDo struct{ gen.DO }

func (m msgSysMsgDo) Debug() *msgSysMsgDo {
	return m.withDO(m.DO.Debug())
}

func (m msgSysMsgDo) WithContext(ctx context.Context) *msgSysMsgDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m msgSysMsgDo) ReadDB() *msgSysMsgDo {
	return m.Clauses(dbresolver.Read)
}

func (m msgSysMsgDo) WriteDB() *msgSysMsgDo {
	return m.Clauses(dbresolver.Write)
}

func (m msgSysMsgDo) Session(config *gorm.Session) *msgSysMsgDo {
	return m.withDO(m.DO.Session(config))
}

func (m msgSysMsgDo) Clauses(conds ...clause.Expression) *msgSysMsgDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m msgSysMsgDo) Returning(value interface{}, columns ...string) *msgSysMsgDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m msgSysMsgDo) Not(conds ...gen.Condition) *msgSysMsgDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m msgSysMsgDo) Or(conds ...gen.Condition) *msgSysMsgDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m msgSysMsgDo) Select(conds ...field.Expr) *msgSysMsgDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m msgSysMsgDo) Where(conds ...gen.Condition) *msgSysMsgDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m msgSysMsgDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *msgSysMsgDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m msgSysMsgDo) Order(conds ...field.Expr) *msgSysMsgDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m msgSysMsgDo) Distinct(cols ...field.Expr) *msgSysMsgDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m msgSysMsgDo) Omit(cols ...field.Expr) *msgSysMsgDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m msgSysMsgDo) Join(table schema.Tabler, on ...field.Expr) *msgSysMsgDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m msgSysMsgDo) LeftJoin(table schema.Tabler, on ...field.Expr) *msgSysMsgDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m msgSysMsgDo) RightJoin(table schema.Tabler, on ...field.Expr) *msgSysMsgDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m msgSysMsgDo) Group(cols ...field.Expr) *msgSysMsgDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m msgSysMsgDo) Having(conds ...gen.Condition) *msgSysMsgDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m msgSysMsgDo) Limit(limit int) *msgSysMsgDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m msgSysMsgDo) Offset(offset int) *msgSysMsgDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m msgSysMsgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *msgSysMsgDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m msgSysMsgDo) Unscoped() *msgSysMsgDo {
	return m.withDO(m.DO.Unscoped())
}

func (m msgSysMsgDo) Create(values ...*model.MsgSysMsg) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m msgSysMsgDo) CreateInBatches(values []*model.MsgSysMsg, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m msgSysMsgDo) Save(values ...*model.MsgSysMsg) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m msgSysMsgDo) First() (*model.MsgSysMsg, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSysMsg), nil
	}
}

func (m msgSysMsgDo) Take() (*model.MsgSysMsg, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSysMsg), nil
	}
}

func (m msgSysMsgDo) Last() (*model.MsgSysMsg, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSysMsg), nil
	}
}

func (m msgSysMsgDo) Find() ([]*model.MsgSysMsg, error) {
	result, err := m.DO.Find()
	return result.([]*model.MsgSysMsg), err
}

func (m msgSysMsgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSysMsg, err error) {
	buf := make([]*model.MsgSysMsg, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m msgSysMsgDo) FindInBatches(result *[]*model.MsgSysMsg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m msgSysMsgDo) Attrs(attrs ...field.AssignExpr) *msgSysMsgDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m msgSysMsgDo) Assign(attrs ...field.AssignExpr) *msgSysMsgDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m msgSysMsgDo) Joins(fields ...field.RelationField) *msgSysMsgDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m msgSysMsgDo) Preload(fields ...field.RelationField) *msgSysMsgDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m msgSysMsgDo) FirstOrInit() (*model.MsgSysMsg, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSysMsg), nil
	}
}

func (m msgSysMsgDo) FirstOrCreate() (*model.MsgSysMsg, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSysMsg), nil
	}
}

func (m msgSysMsgDo) FindByPage(offset int, limit int) (result []*model.MsgSysMsg, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m msgSysMsgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m msgSysMsgDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m msgSysMsgDo) Delete(models ...*model.MsgSysMsg) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *msgSysMsgDo) withDO(do gen.Dao) *msgSysMsgDo {
	m.DO = *do.(*gen.DO)
	return m
}

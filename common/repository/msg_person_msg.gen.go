// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"base-frame/common/model"
)

func newMsgPersonMsg(db *gorm.DB, opts ...gen.DOOption) msgPersonMsg {
	_msgPersonMsg := msgPersonMsg{}

	_msgPersonMsg.msgPersonMsgDo.UseDB(db, opts...)
	_msgPersonMsg.msgPersonMsgDo.UseModel(&model.MsgPersonMsg{})

	tableName := _msgPersonMsg.msgPersonMsgDo.TableName()
	_msgPersonMsg.ALL = field.NewAsterisk(tableName)
	_msgPersonMsg.ID = field.NewUint64(tableName, "id")
	_msgPersonMsg.UID = field.NewUint32(tableName, "uid")
	_msgPersonMsg.FromUID = field.NewUint32(tableName, "from_uid")
	_msgPersonMsg.FromDomain = field.NewString(tableName, "from_domain")
	_msgPersonMsg.FromAvatar = field.NewString(tableName, "from_avatar")
	_msgPersonMsg.FromUsername = field.NewString(tableName, "from_username")
	_msgPersonMsg.FromType = field.NewUint8(tableName, "from_type")
	_msgPersonMsg.FromID = field.NewString(tableName, "from_id")
	_msgPersonMsg.FromAlias = field.NewString(tableName, "from_alias")
	_msgPersonMsg.FromName = field.NewString(tableName, "from_name")
	_msgPersonMsg.Content = field.NewString(tableName, "content")
	_msgPersonMsg.Extras = field.NewString(tableName, "extras")
	_msgPersonMsg.Status = field.NewUint8(tableName, "status")
	_msgPersonMsg.Type = field.NewUint8(tableName, "type")
	_msgPersonMsg.CreateTime = field.NewUint32(tableName, "create_time")
	_msgPersonMsg.UpdateTime = field.NewUint32(tableName, "update_time")
	_msgPersonMsg.OriginID = field.NewString(tableName, "origin_id")

	_msgPersonMsg.fillFieldMap()

	return _msgPersonMsg
}

type msgPersonMsg struct {
	msgPersonMsgDo msgPersonMsgDo

	ALL          field.Asterisk
	ID           field.Uint64
	UID          field.Uint32 // 用户id
	FromUID      field.Uint32 // 发送者用户id
	FromDomain   field.String // 用户标识
	FromAvatar   field.String // 发送者头像
	FromUsername field.String // 发送者用户名
	FromType     field.Uint8  // 来源类型:0文章 1视频 2赛事 3对阵 4直播 5战绩中心 6社区
	FromID       field.String // 来源id
	FromAlias    field.String // 跳转组装
	FromName     field.String // 归属名称
	Content      field.String // 内容
	Extras       field.String // 扩展数据
	Status       field.Uint8  // 0未读 1已读
	Type         field.Uint8  // 消息类型:0评论 1点赞 2艾特
	CreateTime   field.Uint32 // 创建时间
	UpdateTime   field.Uint32 // 更新时间
	OriginID     field.String // 原始id

	fieldMap map[string]field.Expr
}

func (m msgPersonMsg) Table(newTableName string) *msgPersonMsg {
	m.msgPersonMsgDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m msgPersonMsg) As(alias string) *msgPersonMsg {
	m.msgPersonMsgDo.DO = *(m.msgPersonMsgDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *msgPersonMsg) updateTableName(table string) *msgPersonMsg {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint64(table, "id")
	m.UID = field.NewUint32(table, "uid")
	m.FromUID = field.NewUint32(table, "from_uid")
	m.FromDomain = field.NewString(table, "from_domain")
	m.FromAvatar = field.NewString(table, "from_avatar")
	m.FromUsername = field.NewString(table, "from_username")
	m.FromType = field.NewUint8(table, "from_type")
	m.FromID = field.NewString(table, "from_id")
	m.FromAlias = field.NewString(table, "from_alias")
	m.FromName = field.NewString(table, "from_name")
	m.Content = field.NewString(table, "content")
	m.Extras = field.NewString(table, "extras")
	m.Status = field.NewUint8(table, "status")
	m.Type = field.NewUint8(table, "type")
	m.CreateTime = field.NewUint32(table, "create_time")
	m.UpdateTime = field.NewUint32(table, "update_time")
	m.OriginID = field.NewString(table, "origin_id")

	m.fillFieldMap()

	return m
}

func (m *msgPersonMsg) WithContext(ctx context.Context) *msgPersonMsgDo {
	return m.msgPersonMsgDo.WithContext(ctx)
}

func (m msgPersonMsg) TableName() string { return m.msgPersonMsgDo.TableName() }

func (m msgPersonMsg) Alias() string { return m.msgPersonMsgDo.Alias() }

func (m *msgPersonMsg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *msgPersonMsg) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 17)
	m.fieldMap["id"] = m.ID
	m.fieldMap["uid"] = m.UID
	m.fieldMap["from_uid"] = m.FromUID
	m.fieldMap["from_domain"] = m.FromDomain
	m.fieldMap["from_avatar"] = m.FromAvatar
	m.fieldMap["from_username"] = m.FromUsername
	m.fieldMap["from_type"] = m.FromType
	m.fieldMap["from_id"] = m.FromID
	m.fieldMap["from_alias"] = m.FromAlias
	m.fieldMap["from_name"] = m.FromName
	m.fieldMap["content"] = m.Content
	m.fieldMap["extras"] = m.Extras
	m.fieldMap["status"] = m.Status
	m.fieldMap["type"] = m.Type
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["update_time"] = m.UpdateTime
	m.fieldMap["origin_id"] = m.OriginID
}

func (m msgPersonMsg) clone(db *gorm.DB) msgPersonMsg {
	m.msgPersonMsgDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m msgPersonMsg) replaceDB(db *gorm.DB) msgPersonMsg {
	m.msgPersonMsgDo.ReplaceDB(db)
	return m
}

type msgPersonMsgDo struct{ gen.DO }

func (m msgPersonMsgDo) Debug() *msgPersonMsgDo {
	return m.withDO(m.DO.Debug())
}

func (m msgPersonMsgDo) WithContext(ctx context.Context) *msgPersonMsgDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m msgPersonMsgDo) ReadDB() *msgPersonMsgDo {
	return m.Clauses(dbresolver.Read)
}

func (m msgPersonMsgDo) WriteDB() *msgPersonMsgDo {
	return m.Clauses(dbresolver.Write)
}

func (m msgPersonMsgDo) Session(config *gorm.Session) *msgPersonMsgDo {
	return m.withDO(m.DO.Session(config))
}

func (m msgPersonMsgDo) Clauses(conds ...clause.Expression) *msgPersonMsgDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m msgPersonMsgDo) Returning(value interface{}, columns ...string) *msgPersonMsgDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m msgPersonMsgDo) Not(conds ...gen.Condition) *msgPersonMsgDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m msgPersonMsgDo) Or(conds ...gen.Condition) *msgPersonMsgDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m msgPersonMsgDo) Select(conds ...field.Expr) *msgPersonMsgDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m msgPersonMsgDo) Where(conds ...gen.Condition) *msgPersonMsgDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m msgPersonMsgDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *msgPersonMsgDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m msgPersonMsgDo) Order(conds ...field.Expr) *msgPersonMsgDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m msgPersonMsgDo) Distinct(cols ...field.Expr) *msgPersonMsgDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m msgPersonMsgDo) Omit(cols ...field.Expr) *msgPersonMsgDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m msgPersonMsgDo) Join(table schema.Tabler, on ...field.Expr) *msgPersonMsgDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m msgPersonMsgDo) LeftJoin(table schema.Tabler, on ...field.Expr) *msgPersonMsgDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m msgPersonMsgDo) RightJoin(table schema.Tabler, on ...field.Expr) *msgPersonMsgDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m msgPersonMsgDo) Group(cols ...field.Expr) *msgPersonMsgDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m msgPersonMsgDo) Having(conds ...gen.Condition) *msgPersonMsgDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m msgPersonMsgDo) Limit(limit int) *msgPersonMsgDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m msgPersonMsgDo) Offset(offset int) *msgPersonMsgDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m msgPersonMsgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *msgPersonMsgDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m msgPersonMsgDo) Unscoped() *msgPersonMsgDo {
	return m.withDO(m.DO.Unscoped())
}

func (m msgPersonMsgDo) Create(values ...*model.MsgPersonMsg) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m msgPersonMsgDo) CreateInBatches(values []*model.MsgPersonMsg, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m msgPersonMsgDo) Save(values ...*model.MsgPersonMsg) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m msgPersonMsgDo) First() (*model.MsgPersonMsg, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgPersonMsg), nil
	}
}

func (m msgPersonMsgDo) Take() (*model.MsgPersonMsg, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgPersonMsg), nil
	}
}

func (m msgPersonMsgDo) Last() (*model.MsgPersonMsg, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgPersonMsg), nil
	}
}

func (m msgPersonMsgDo) Find() ([]*model.MsgPersonMsg, error) {
	result, err := m.DO.Find()
	return result.([]*model.MsgPersonMsg), err
}

func (m msgPersonMsgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgPersonMsg, err error) {
	buf := make([]*model.MsgPersonMsg, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m msgPersonMsgDo) FindInBatches(result *[]*model.MsgPersonMsg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m msgPersonMsgDo) Attrs(attrs ...field.AssignExpr) *msgPersonMsgDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m msgPersonMsgDo) Assign(attrs ...field.AssignExpr) *msgPersonMsgDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m msgPersonMsgDo) Joins(fields ...field.RelationField) *msgPersonMsgDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m msgPersonMsgDo) Preload(fields ...field.RelationField) *msgPersonMsgDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m msgPersonMsgDo) FirstOrInit() (*model.MsgPersonMsg, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgPersonMsg), nil
	}
}

func (m msgPersonMsgDo) FirstOrCreate() (*model.MsgPersonMsg, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgPersonMsg), nil
	}
}

func (m msgPersonMsgDo) FindByPage(offset int, limit int) (result []*model.MsgPersonMsg, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m msgPersonMsgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m msgPersonMsgDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m msgPersonMsgDo) Delete(models ...*model.MsgPersonMsg) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *msgPersonMsgDo) withDO(do gen.Dao) *msgPersonMsgDo {
	m.DO = *do.(*gen.DO)
	return m
}

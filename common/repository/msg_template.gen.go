// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"base-frame/common/model"
)

func newMsgTemplate(db *gorm.DB, opts ...gen.DOOption) msgTemplate {
	_msgTemplate := msgTemplate{}

	_msgTemplate.msgTemplateDo.UseDB(db, opts...)
	_msgTemplate.msgTemplateDo.UseModel(&model.MsgTemplate{})

	tableName := _msgTemplate.msgTemplateDo.TableName()
	_msgTemplate.ALL = field.NewAsterisk(tableName)
	_msgTemplate.ID = field.NewUint32(tableName, "id")
	_msgTemplate.AccountTag = field.NewString(tableName, "account_tag")
	_msgTemplate.Channel = field.NewString(tableName, "channel")
	_msgTemplate.ThirdTemplateID = field.NewString(tableName, "third_template_id")
	_msgTemplate.Name = field.NewString(tableName, "name")
	_msgTemplate.Content = field.NewString(tableName, "content")
	_msgTemplate.Params = field.NewString(tableName, "params")
	_msgTemplate.Remark = field.NewString(tableName, "remark")
	_msgTemplate.ThirdStatus = field.NewInt8(tableName, "third_status")
	_msgTemplate.Type = field.NewInt8(tableName, "type")
	_msgTemplate.Status = field.NewInt8(tableName, "status")
	_msgTemplate.Creator = field.NewString(tableName, "creator")
	_msgTemplate.CreatedAt = field.NewTime(tableName, "created_at")
	_msgTemplate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_msgTemplate.DeletedAt = field.NewField(tableName, "deleted_at")

	_msgTemplate.fillFieldMap()

	return _msgTemplate
}

type msgTemplate struct {
	msgTemplateDo msgTemplateDo

	ALL             field.Asterisk
	ID              field.Uint32
	AccountTag      field.String // 第三方账号id
	Channel         field.String // 渠道 sms email app dingtalk sysmsg pcpush
	ThirdTemplateID field.String // 第三方模版id
	Name            field.String // 模版名称
	Content         field.String // 模版内容
	Params          field.String // 请求参数模版
	Remark          field.String // 模版备注
	ThirdStatus     field.Int8   // 第三方状态 1-申请中 2-申请成功 3 申请驳回
	Type            field.Int8   // 模版类型：0-验证码1-通知 2-营销
	Status          field.Int8   // 任务状态： 0-启用 1-停用
	Creator         field.String // 创建人
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (m msgTemplate) Table(newTableName string) *msgTemplate {
	m.msgTemplateDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m msgTemplate) As(alias string) *msgTemplate {
	m.msgTemplateDo.DO = *(m.msgTemplateDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *msgTemplate) updateTableName(table string) *msgTemplate {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint32(table, "id")
	m.AccountTag = field.NewString(table, "account_tag")
	m.Channel = field.NewString(table, "channel")
	m.ThirdTemplateID = field.NewString(table, "third_template_id")
	m.Name = field.NewString(table, "name")
	m.Content = field.NewString(table, "content")
	m.Params = field.NewString(table, "params")
	m.Remark = field.NewString(table, "remark")
	m.ThirdStatus = field.NewInt8(table, "third_status")
	m.Type = field.NewInt8(table, "type")
	m.Status = field.NewInt8(table, "status")
	m.Creator = field.NewString(table, "creator")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *msgTemplate) WithContext(ctx context.Context) *msgTemplateDo {
	return m.msgTemplateDo.WithContext(ctx)
}

func (m msgTemplate) TableName() string { return m.msgTemplateDo.TableName() }

func (m msgTemplate) Alias() string { return m.msgTemplateDo.Alias() }

func (m *msgTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *msgTemplate) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 15)
	m.fieldMap["id"] = m.ID
	m.fieldMap["account_tag"] = m.AccountTag
	m.fieldMap["channel"] = m.Channel
	m.fieldMap["third_template_id"] = m.ThirdTemplateID
	m.fieldMap["name"] = m.Name
	m.fieldMap["content"] = m.Content
	m.fieldMap["params"] = m.Params
	m.fieldMap["remark"] = m.Remark
	m.fieldMap["third_status"] = m.ThirdStatus
	m.fieldMap["type"] = m.Type
	m.fieldMap["status"] = m.Status
	m.fieldMap["creator"] = m.Creator
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m msgTemplate) clone(db *gorm.DB) msgTemplate {
	m.msgTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m msgTemplate) replaceDB(db *gorm.DB) msgTemplate {
	m.msgTemplateDo.ReplaceDB(db)
	return m
}

type msgTemplateDo struct{ gen.DO }

func (m msgTemplateDo) Debug() *msgTemplateDo {
	return m.withDO(m.DO.Debug())
}

func (m msgTemplateDo) WithContext(ctx context.Context) *msgTemplateDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m msgTemplateDo) ReadDB() *msgTemplateDo {
	return m.Clauses(dbresolver.Read)
}

func (m msgTemplateDo) WriteDB() *msgTemplateDo {
	return m.Clauses(dbresolver.Write)
}

func (m msgTemplateDo) Session(config *gorm.Session) *msgTemplateDo {
	return m.withDO(m.DO.Session(config))
}

func (m msgTemplateDo) Clauses(conds ...clause.Expression) *msgTemplateDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m msgTemplateDo) Returning(value interface{}, columns ...string) *msgTemplateDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m msgTemplateDo) Not(conds ...gen.Condition) *msgTemplateDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m msgTemplateDo) Or(conds ...gen.Condition) *msgTemplateDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m msgTemplateDo) Select(conds ...field.Expr) *msgTemplateDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m msgTemplateDo) Where(conds ...gen.Condition) *msgTemplateDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m msgTemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *msgTemplateDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m msgTemplateDo) Order(conds ...field.Expr) *msgTemplateDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m msgTemplateDo) Distinct(cols ...field.Expr) *msgTemplateDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m msgTemplateDo) Omit(cols ...field.Expr) *msgTemplateDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m msgTemplateDo) Join(table schema.Tabler, on ...field.Expr) *msgTemplateDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m msgTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *msgTemplateDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m msgTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *msgTemplateDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m msgTemplateDo) Group(cols ...field.Expr) *msgTemplateDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m msgTemplateDo) Having(conds ...gen.Condition) *msgTemplateDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m msgTemplateDo) Limit(limit int) *msgTemplateDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m msgTemplateDo) Offset(offset int) *msgTemplateDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m msgTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *msgTemplateDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m msgTemplateDo) Unscoped() *msgTemplateDo {
	return m.withDO(m.DO.Unscoped())
}

func (m msgTemplateDo) Create(values ...*model.MsgTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m msgTemplateDo) CreateInBatches(values []*model.MsgTemplate, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m msgTemplateDo) Save(values ...*model.MsgTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m msgTemplateDo) First() (*model.MsgTemplate, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgTemplate), nil
	}
}

func (m msgTemplateDo) Take() (*model.MsgTemplate, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgTemplate), nil
	}
}

func (m msgTemplateDo) Last() (*model.MsgTemplate, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgTemplate), nil
	}
}

func (m msgTemplateDo) Find() ([]*model.MsgTemplate, error) {
	result, err := m.DO.Find()
	return result.([]*model.MsgTemplate), err
}

func (m msgTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgTemplate, err error) {
	buf := make([]*model.MsgTemplate, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m msgTemplateDo) FindInBatches(result *[]*model.MsgTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m msgTemplateDo) Attrs(attrs ...field.AssignExpr) *msgTemplateDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m msgTemplateDo) Assign(attrs ...field.AssignExpr) *msgTemplateDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m msgTemplateDo) Joins(fields ...field.RelationField) *msgTemplateDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m msgTemplateDo) Preload(fields ...field.RelationField) *msgTemplateDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m msgTemplateDo) FirstOrInit() (*model.MsgTemplate, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgTemplate), nil
	}
}

func (m msgTemplateDo) FirstOrCreate() (*model.MsgTemplate, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgTemplate), nil
	}
}

func (m msgTemplateDo) FindByPage(offset int, limit int) (result []*model.MsgTemplate, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m msgTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m msgTemplateDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m msgTemplateDo) Delete(models ...*model.MsgTemplate) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *msgTemplateDo) withDO(do gen.Dao) *msgTemplateDo {
	m.DO = *do.(*gen.DO)
	return m
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	MsgAccount      *msgAccount
	MsgFriendCount  *msgFriendCount
	MsgFriendCount1 *msgFriendCount1
	MsgFriendMsg    *msgFriendMsg
	MsgPersonCount  *msgPersonCount
	MsgPersonMsg    *msgPersonMsg
	MsgSubTask      *msgSubTask
	MsgSysCount     *msgSysCount
	MsgSysMsg       *msgSysMsg
	MsgTask         *msgTask
	MsgTemplate     *msgTemplate
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	MsgAccount = &Q.MsgAccount
	MsgFriendCount = &Q.MsgFriendCount
	MsgFriendCount1 = &Q.MsgFriendCount1
	MsgFriendMsg = &Q.MsgFriendMsg
	MsgPersonCount = &Q.MsgPersonCount
	MsgPersonMsg = &Q.MsgPersonMsg
	MsgSubTask = &Q.MsgSubTask
	MsgSysCount = &Q.MsgSysCount
	MsgSysMsg = &Q.MsgSysMsg
	MsgTask = &Q.MsgTask
	MsgTemplate = &Q.MsgTemplate
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		MsgAccount:      newMsgAccount(db, opts...),
		MsgFriendCount:  newMsgFriendCount(db, opts...),
		MsgFriendCount1: newMsgFriendCount1(db, opts...),
		MsgFriendMsg:    newMsgFriendMsg(db, opts...),
		MsgPersonCount:  newMsgPersonCount(db, opts...),
		MsgPersonMsg:    newMsgPersonMsg(db, opts...),
		MsgSubTask:      newMsgSubTask(db, opts...),
		MsgSysCount:     newMsgSysCount(db, opts...),
		MsgSysMsg:       newMsgSysMsg(db, opts...),
		MsgTask:         newMsgTask(db, opts...),
		MsgTemplate:     newMsgTemplate(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	MsgAccount      msgAccount
	MsgFriendCount  msgFriendCount
	MsgFriendCount1 msgFriendCount1
	MsgFriendMsg    msgFriendMsg
	MsgPersonCount  msgPersonCount
	MsgPersonMsg    msgPersonMsg
	MsgSubTask      msgSubTask
	MsgSysCount     msgSysCount
	MsgSysMsg       msgSysMsg
	MsgTask         msgTask
	MsgTemplate     msgTemplate
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		MsgAccount:      q.MsgAccount.clone(db),
		MsgFriendCount:  q.MsgFriendCount.clone(db),
		MsgFriendCount1: q.MsgFriendCount1.clone(db),
		MsgFriendMsg:    q.MsgFriendMsg.clone(db),
		MsgPersonCount:  q.MsgPersonCount.clone(db),
		MsgPersonMsg:    q.MsgPersonMsg.clone(db),
		MsgSubTask:      q.MsgSubTask.clone(db),
		MsgSysCount:     q.MsgSysCount.clone(db),
		MsgSysMsg:       q.MsgSysMsg.clone(db),
		MsgTask:         q.MsgTask.clone(db),
		MsgTemplate:     q.MsgTemplate.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		MsgAccount:      q.MsgAccount.replaceDB(db),
		MsgFriendCount:  q.MsgFriendCount.replaceDB(db),
		MsgFriendCount1: q.MsgFriendCount1.replaceDB(db),
		MsgFriendMsg:    q.MsgFriendMsg.replaceDB(db),
		MsgPersonCount:  q.MsgPersonCount.replaceDB(db),
		MsgPersonMsg:    q.MsgPersonMsg.replaceDB(db),
		MsgSubTask:      q.MsgSubTask.replaceDB(db),
		MsgSysCount:     q.MsgSysCount.replaceDB(db),
		MsgSysMsg:       q.MsgSysMsg.replaceDB(db),
		MsgTask:         q.MsgTask.replaceDB(db),
		MsgTemplate:     q.MsgTemplate.replaceDB(db),
	}
}

type queryCtx struct {
	MsgAccount      *msgAccountDo
	MsgFriendCount  *msgFriendCountDo
	MsgFriendCount1 *msgFriendCount1Do
	MsgFriendMsg    *msgFriendMsgDo
	MsgPersonCount  *msgPersonCountDo
	MsgPersonMsg    *msgPersonMsgDo
	MsgSubTask      *msgSubTaskDo
	MsgSysCount     *msgSysCountDo
	MsgSysMsg       *msgSysMsgDo
	MsgTask         *msgTaskDo
	MsgTemplate     *msgTemplateDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		MsgAccount:      q.MsgAccount.WithContext(ctx),
		MsgFriendCount:  q.MsgFriendCount.WithContext(ctx),
		MsgFriendCount1: q.MsgFriendCount1.WithContext(ctx),
		MsgFriendMsg:    q.MsgFriendMsg.WithContext(ctx),
		MsgPersonCount:  q.MsgPersonCount.WithContext(ctx),
		MsgPersonMsg:    q.MsgPersonMsg.WithContext(ctx),
		MsgSubTask:      q.MsgSubTask.WithContext(ctx),
		MsgSysCount:     q.MsgSysCount.WithContext(ctx),
		MsgSysMsg:       q.MsgSysMsg.WithContext(ctx),
		MsgTask:         q.MsgTask.WithContext(ctx),
		MsgTemplate:     q.MsgTemplate.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
